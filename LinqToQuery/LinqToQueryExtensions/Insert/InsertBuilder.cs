//Author:Riyasat Ali 
// http://www.riytechnologies.com:
//Linkedin: https://www.linkedin.com/in/riyasat-ali/
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using Dapper;
using LinqToQueryExtensions.Utilities.Attributes;

namespace LinqToQueryExtensions.Insert
{
	public class InsertBuilder
	{
		private readonly SqlConnection _connection;
		internal readonly List<object> Entities;
		internal readonly DynamicParameters Parameters;
		public InsertBuilder(SqlConnection connection)
		{
			_connection = connection;
			Entities = new List<object>();
			Parameters = new DynamicParameters();
		}

		public InsertBuilder Entity<TModel>(TModel entity)
		{
			Entities.Add(entity);
			return this;
		}

		public string ToQuery()
		{
			string query = "";
			foreach (var entity in Entities)
			{
				query += GenerateInsertQueries(entity);
			}
			return query;
		}

		private string GenerateInsertQueries(object entity)
		{
			var type = entity.GetType();
			var properties = type.GetProperties();

			string tableName = type.Name;
			string columns = "";
			List<string> columnNames = new List<string>();
			var tableAttribute = type.GetCustomAttribute<TableAttribute>();
			if (tableAttribute != null)
			{
				tableName = string.IsNullOrWhiteSpace(tableAttribute.Schema) == false
					? $"{tableAttribute.Schema}.{tableAttribute.Name}"
					: tableAttribute.Name;
			}

			foreach (var propertyInfo in properties)
			{
				var ignore = propertyInfo.GetCustomAttribute<IgnoreAttribute>();
				var identityAttribute = propertyInfo.GetCustomAttribute<IdentityAttribute>();
				var requiredAttribute = propertyInfo.GetCustomAttribute<RequiredAttribute>();

				if (ignore != null || (identityAttribute!=null && identityAttribute.AutoGenerated)) continue;

				var column = propertyInfo.GetCustomAttribute<ColumnAttribute>();
				var columnName = column != null ? column.Name : propertyInfo.Name;

				columnNames.Add(columnName);

				if (requiredAttribute!=null && propertyInfo.GetValue(entity)==null)
					throw new Exception($"{columnName} cannot be null");

				Parameters.Add($"@{columnName}", propertyInfo.GetValue(entity));
			}
			columns = string.Join(",", columnNames);
			var paramColumns = string.Join(",@", columnNames);

			var query = $"INSERT INTO {tableName} ({columns}) VALUES(@{paramColumns});";
			return query;
		}

		public void Execute(IsolationLevel transactionLevel)
		{
			using (var con = _connection)
			{
				if(con.State == ConnectionState.Closed)
					con.Open();
				using (var tr = con.BeginTransaction(transactionLevel))
				{
					try
					{
						var query = ToQuery();
						_connection.Execute(query, Parameters, tr);
						tr.Commit();
					}
					catch (Exception)
					{
						tr.Rollback();
						throw;
					}
				}
			}
			
		}
	}
}